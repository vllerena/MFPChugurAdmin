/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/sparkline.init.js":
/*!**********************************************!*\
  !*** ./resources/js/pages/sparkline.init.js ***!
  \**********************************************/
/***/ (() => {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Sparkline charts init js\n*/\n$(document).ready(function () {\n  var DrawSparkline = function DrawSparkline() {\n    // Line Chart\n    var colors = ['#6658dd', '#1abc9c'];\n    var dataColors = $(\"#sparkline1\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline1').sparkline([0, 23, 43, 35, 44, 45, 56, 37, 40], {\n      type: 'line',\n      width: \"100%\",\n      height: '165',\n      chartRangeMax: 50,\n      lineColor: colors[0],\n      fillColor: hexToRGB(colors[0], 0.3),\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)',\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false,\n      lineWidth: 1\n    });\n    $('#sparkline1').sparkline([25, 23, 26, 24, 25, 32, 30, 24, 19], {\n      type: 'line',\n      width: \"100%\",\n      height: '165',\n      chartRangeMax: 40,\n      lineColor: colors[1],\n      fillColor: hexToRGB(colors[1], 0.3),\n      composite: true,\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)',\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false,\n      lineWidth: 1\n    }); // Bar Chart\n\n    var colors = ['#4a81d4'];\n    var dataColors = $(\"#sparkline2\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline2').sparkline([3, 6, 7, 8, 6, 4, 7, 10, 12, 7, 4, 9, 12, 13, 11, 12], {\n      type: 'bar',\n      height: '165',\n      barWidth: '10',\n      barSpacing: '3',\n      barColor: colors\n    }); // Pie Chart\n\n    var colors = ['#4fc6e1', '#f7b84b', '#e3eaef', '#f1556c'];\n    var dataColors = $(\"#sparkline3\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline3').sparkline([20, 40, 30, 10], {\n      type: 'pie',\n      width: '165',\n      height: '165',\n      sliceColors: colors\n    }); // Combine Line Chart\n\n    var colors = ['#2d7bf4', '#4eb7eb'];\n    var dataColors = $(\"#sparkline4\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline4').sparkline([0, 23, 43, 35, 44, 45, 56, 37, 40], {\n      type: 'line',\n      width: \"100%\",\n      height: '165',\n      chartRangeMax: 50,\n      lineColor: colors[0],\n      fillColor: 'transparent',\n      lineWidth: 2,\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)',\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false\n    });\n    $('#sparkline4').sparkline([25, 23, 26, 24, 25, 32, 30, 24, 19], {\n      type: 'line',\n      width: \"100%\",\n      height: '165',\n      chartRangeMax: 40,\n      lineColor: colors[1],\n      fillColor: 'transparent',\n      composite: true,\n      lineWidth: 2,\n      maxSpotColor: false,\n      minSpotColor: false,\n      spotColor: false,\n      highlightLineColor: 'rgba(0,0,0,1)',\n      highlightSpotColor: 'rgba(0,0,0,1)'\n    }); // Composite bar Chart\n\n    var colors = ['#e3eaef', '#6c757d'];\n    var dataColors = $(\"#sparkline6\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline6').sparkline([3, 6, 7, 8, 6, 4, 7, 10, 12, 7, 4, 9, 12, 13, 11, 12], {\n      type: 'line',\n      width: \"100%\",\n      height: '165',\n      lineColor: colors[0],\n      lineWidth: 2,\n      fillColor: 'rgba(227,234,239,0.3)',\n      highlightLineColor: 'rgba(0,0,0,.1)',\n      highlightSpotColor: 'rgba(0,0,0,.2)'\n    });\n    $('#sparkline6').sparkline([3, 6, 7, 8, 6, 4, 7, 10, 12, 7, 4, 9, 12, 13, 11, 12], {\n      type: 'bar',\n      height: '165',\n      barWidth: '10',\n      barSpacing: '5',\n      composite: true,\n      barColor: colors[1]\n    }); // Discrete Chart\n\n    var colors = ['#36404c'];\n    var dataColors = $(\"#sparkline7\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $(\"#sparkline7\").sparkline([4, 6, 7, 7, 4, 3, 2, 1, 4, 4, 5, 6, 3, 4, 5, 8, 7, 6, 9, 3, 2, 4, 1, 5, 6, 4, 3, 7], {\n      type: 'discrete',\n      width: '280',\n      height: '165',\n      lineColor: colors\n    }); // Bullet Chart\n\n    var colors = ['#64c5b1', '#5553ce'];\n    var dataColors = $(\"#sparkline8\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline8').sparkline([10, 12, 12, 9, 7], {\n      type: 'bullet',\n      width: '280',\n      height: '80',\n      targetColor: colors[0],\n      performanceColor: colors[1]\n    }); // Box Plot Chart\n\n    var colors = ['#6658dd', '#1abc9c'];\n    var dataColors = $(\"#sparkline9\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline9').sparkline([4, 27, 34, 52, 54, 59, 61, 68, 78, 82, 85, 87, 91, 93, 100], {\n      type: 'box',\n      width: '280',\n      height: '80',\n      boxLineColor: colors[0],\n      boxFillColor: 'transparent',\n      whiskerColor: colors[1],\n      medianColor: colors[1],\n      targetColor: colors[1]\n    }); // Tristate Charts\n\n    var colors = ['#0acf97', '#e3eaef', '#ff679b'];\n    var dataColors = $(\"#sparkline10\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    $('#sparkline10').sparkline([1, 1, 0, 1, -1, -1, 1, -1, 0, 0, 1, 1], {\n      height: '80',\n      width: '100%',\n      type: 'tristate',\n      posBarColor: colors[0],\n      negBarColor: colors[1],\n      zeroBarColor: colors[2],\n      barWidth: 8,\n      barSpacing: 3,\n      zeroAxis: false\n    });\n  },\n      DrawMouseSpeed = function DrawMouseSpeed() {\n    var mrefreshinterval = 500; // update display every 500ms\n\n    var lastmousex = -1;\n    var lastmousey = -1;\n    var lastmousetime;\n    var mousetravel = 0;\n    var mpoints = [];\n    var mpoints_max = 30;\n    $('html').mousemove(function (e) {\n      var mousex = e.pageX;\n      var mousey = e.pageY;\n\n      if (lastmousex > -1) {\n        mousetravel += Math.max(Math.abs(mousex - lastmousex), Math.abs(mousey - lastmousey));\n      }\n\n      lastmousex = mousex;\n      lastmousey = mousey;\n    });\n\n    var mdraw = function mdraw() {\n      var md = new Date();\n      var timenow = md.getTime();\n\n      if (lastmousetime && lastmousetime != timenow) {\n        var pps = Math.round(mousetravel / (timenow - lastmousetime) * 1000);\n        mpoints.push(pps);\n        if (mpoints.length > mpoints_max) mpoints.splice(0, 1);\n        mousetravel = 0;\n        var colors = ['#f1556c'];\n        var dataColors = $(\"#sparkline5\").data('colors');\n\n        if (dataColors) {\n          colors = dataColors.split(\",\");\n        }\n\n        $('#sparkline5').sparkline(mpoints, {\n          tooltipSuffix: ' pixels per second',\n          type: 'line',\n          width: \"100%\",\n          height: '165',\n          chartRangeMax: 77,\n          maxSpotColor: false,\n          minSpotColor: false,\n          spotColor: false,\n          lineWidth: 1,\n          lineColor: colors,\n          fillColor: hexToRGB(colors[0], 0.3),\n          highlightLineColor: 'rgba(24,147,126,.1)',\n          highlightSpotColor: 'rgba(24,147,126,.2)'\n        });\n      }\n\n      lastmousetime = timenow;\n      setTimeout(mdraw, mrefreshinterval);\n    }; // We could use setInterval instead, but I prefer to do it this way\n\n\n    setTimeout(mdraw, mrefreshinterval);\n  };\n\n  DrawSparkline();\n  DrawMouseSpeed();\n  var resizeChart;\n  $(window).resize(function (e) {\n    clearTimeout(resizeChart);\n    resizeChart = setTimeout(function () {\n      DrawSparkline();\n      DrawMouseSpeed();\n    }, 300);\n  });\n});\n/* utility function */\n\nfunction hexToRGB(hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16),\n      g = parseInt(hex.slice(3, 5), 16),\n      b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/sparkline.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/sparkline.init.js"]();
/******/ 	
/******/ })()
;