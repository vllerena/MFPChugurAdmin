/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pages/dashboard-3.init.js":
/*!************************************************!*\
  !*** ./resources/js/pages/dashboard-3.init.js ***!
  \************************************************/
/***/ (() => {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Dashboard init\n*/\n!function ($) {\n  \"use strict\";\n\n  var ChartJs = function ChartJs() {\n    this.$body = $(\"body\"), this.charts = [];\n  };\n\n  ChartJs.prototype.respChart = function (selector, type, data, options) {\n    // get selector by context\n    var ctx = selector.get(0).getContext(\"2d\"); //default config\n\n    Chart.defaults.global.defaultFontColor = \"#8391a2\";\n    Chart.defaults.scale.gridLines.color = \"#8391a2\"; // pointing parent container to make chart js inherit its width\n\n    var container = $(selector).parent(); // this function produce the responsive Chart JS\n\n    function generateChart() {\n      // make chart width fit with its container\n      var ww = selector.attr('width', $(container).width());\n      var chart;\n\n      switch (type) {\n        case 'Line':\n          chart = new Chart(ctx, {\n            type: 'line',\n            data: data,\n            options: options\n          });\n          break;\n\n        case 'Doughnut':\n          chart = new Chart(ctx, {\n            type: 'doughnut',\n            data: data,\n            options: options\n          });\n          break;\n\n        case 'Pie':\n          chart = new Chart(ctx, {\n            type: 'pie',\n            data: data,\n            options: options\n          });\n          break;\n\n        case 'Bar':\n          chart = new Chart(ctx, {\n            type: 'bar',\n            data: data,\n            options: options\n          });\n          break;\n\n        case 'Radar':\n          chart = new Chart(ctx, {\n            type: 'radar',\n            data: data,\n            options: options\n          });\n          break;\n\n        case 'PolarArea':\n          chart = new Chart(ctx, {\n            data: data,\n            type: 'polarArea',\n            options: options\n          });\n          break;\n      }\n\n      return chart;\n    }\n\n    ; // run function - render chart at first load\n\n    return generateChart();\n  }, // init various charts and returns\n  ChartJs.prototype.initCharts = function () {\n    var charts = [];\n    var defaultColors = [\"#1abc9c\", \"#f1556c\", \"#4a81d4\", \"#e3eaef\"];\n\n    if ($('#revenue-chart').length > 0) {\n      var dataColors = $(\"#revenue-chart\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var lineChart = {\n        labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        datasets: [{\n          label: \"Current Week\",\n          backgroundColor: hexToRGB(colors[0], 0.3),\n          borderColor: colors[0],\n          data: [32, 42, 42, 62, 52, 75, 62]\n        }, {\n          label: \"Previous Week\",\n          fill: true,\n          backgroundColor: 'transparent',\n          borderColor: colors[1],\n          borderDash: [5, 5],\n          data: [42, 58, 66, 93, 82, 105, 92]\n        }]\n      };\n      var lineOpts = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        tooltips: {\n          intersect: false\n        },\n        hover: {\n          intersect: true\n        },\n        plugins: {\n          filler: {\n            propagate: false\n          }\n        },\n        scales: {\n          xAxes: [{\n            reverse: true,\n            gridLines: {\n              color: \"rgba(0,0,0,0.05)\"\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              stepSize: 20\n            },\n            display: true,\n            borderDash: [5, 5],\n            gridLines: {\n              color: \"rgba(0,0,0,0)\",\n              fontColor: '#fff'\n            }\n          }]\n        }\n      };\n      charts.push(this.respChart($(\"#revenue-chart\"), 'Line', lineChart, lineOpts));\n    } //barchart\n\n\n    if ($('#projections-actuals-chart').length > 0) {\n      var dataColors = $(\"#projections-actuals-chart\").data('colors');\n      var colors = dataColors ? dataColors.split(\",\") : defaultColors.concat();\n      var barChart = {\n        // labels: [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"],\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        datasets: [{\n          label: \"Sales Analytics\",\n          backgroundColor: colors[0],\n          borderColor: colors[0],\n          hoverBackgroundColor: colors[0],\n          hoverBorderColor: colors[0],\n          data: [65, 59, 80, 81, 56, 89, 40, 32, 65, 59, 80, 81],\n          barPercentage: 0.7,\n          categoryPercentage: 0.5\n        }, {\n          label: \"Dollar Rate\",\n          backgroundColor: colors[1],\n          borderColor: colors[1],\n          hoverBackgroundColor: colors[1],\n          hoverBorderColor: colors[1],\n          data: [89, 40, 32, 65, 59, 80, 81, 56, 89, 40, 65, 59],\n          barPercentage: 0.7,\n          categoryPercentage: 0.5\n        }]\n      };\n      var barOpts = {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          yAxes: [{\n            gridLines: {\n              display: false\n            },\n            stacked: false,\n            ticks: {\n              stepSize: 20\n            }\n          }],\n          xAxes: [{\n            stacked: false,\n            gridLines: {\n              color: \"rgba(0,0,0,0.01)\"\n            }\n          }]\n        }\n      };\n      charts.push(this.respChart($(\"#projections-actuals-chart\"), 'Bar', barChart, barOpts));\n    }\n\n    return charts;\n  }, //initializing various components and plugins\n  ChartJs.prototype.init = function () {\n    var $this = this; // font\n\n    Chart.defaults.global.defaultFontFamily = 'Nunito,sans-serif'; // init charts\n\n    $this.charts = this.initCharts(); // enable resizing matter\n\n    $(window).on('resize', function (e) {\n      $.each($this.charts, function (index, chart) {\n        try {\n          chart.destroy();\n        } catch (err) {}\n      });\n      $this.charts = $this.initCharts();\n    });\n  }, //init flotchart\n  $.ChartJs = new ChartJs(), $.ChartJs.Constructor = ChartJs;\n}(window.jQuery), //initializing ChartJs\nfunction ($) {\n  \"use strict\";\n\n  $.ChartJs.init();\n}(window.jQuery);\n/* utility function */\n\nfunction hexToRGB(hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16),\n      g = parseInt(hex.slice(3, 5), 16),\n      b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/dashboard-3.init.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pages/dashboard-3.init.js"]();
/******/ 	
/******/ })()
;